package com.example;// Generated by Numerix on 05/31/2018 datasync

import java.util.AbstractMap;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.stream.Collectors;

import javax.cache.Cache;
import javax.cache.integration.CacheWriter;
import javax.cache.integration.CacheWriterException;

import io.reactivex.subjects.PublishSubject;

public class RxJCacheWriter<K,V> implements CacheWriter<K,V> {
    private final PublishSubject<Map.Entry<K, V>> subject;
    private final PublishSubject<Object> deleteSubject;

    private RxJCacheWriter(RxJCacheWriter.Builder<K, V> builder) {
        subject = PublishSubject.create();
        deleteSubject  =PublishSubject.create();
        subject.buffer(builder.bufferTimeNanos, TimeUnit.NANOSECONDS)
                .map(entries -> entries.stream().filter(Objects::nonNull).collect(
                        Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, builder.coalescer)))
                .subscribe(builder.writeAction::accept);
        deleteSubject.buffer(builder.bufferTimeNanos,TimeUnit.NANOSECONDS).subscribe(builder.deleteAction::accept);
    }
    @Override
    public void write(Cache.Entry<? extends K, ? extends V> entry) throws CacheWriterException {
        subject.onNext(new AbstractMap.SimpleImmutableEntry<>(entry.getKey(), entry.getValue()));
    }

    @Override
    public void writeAll(Collection<Cache.Entry<? extends K, ? extends V>> collection) throws CacheWriterException {
        collection.forEach(this::write);
    }

    @Override
    public void delete(Object o) throws CacheWriterException {
        deleteSubject.onNext(o);
    }

    @Override
    public void deleteAll(Collection<?> collection) throws CacheWriterException {
        collection.forEach(this::delete);
    }

    public static final class Builder<K, V> {
        private Consumer<Map<K, V>> writeAction;
        private BinaryOperator<V> coalescer;
        private long bufferTimeNanos;
        private Consumer<Object> deleteAction;

        public RxJCacheWriter.Builder<K, V> bufferTime(long duration, TimeUnit unit) {
            this.bufferTimeNanos = TimeUnit.NANOSECONDS.convert(duration, unit);
            return this;
        }

        public RxJCacheWriter.Builder<K, V> writeAction(Consumer<Map<K, V>> writeAction) {
            this.writeAction = Objects.requireNonNull(writeAction);
            return this;
        }

        public RxJCacheWriter.Builder<K, V> coalesce(BinaryOperator<V> coalescer) {
            this.coalescer = Objects.requireNonNull(coalescer);
            return this;
        }

        public RxJCacheWriter.Builder<K,V> deleteAction(Consumer<Object> deleteAction){
            this.deleteAction = deleteAction;
            return this;
        }

        public RxJCacheWriter<K, V> build() {
            return new RxJCacheWriter<>(this);
        }
    }
}
